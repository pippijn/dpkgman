#!/usr/bin/make -f

###############################################################
# :: Architectures to build for and package archive for upload
###############################################################

ARCHIVE		:= ppa:pippijn/ppa

ARCHITECTURES	:= i386
ifeq ($(shell uname -m),x86_64)
ARCHITECTURES	+= amd64
endif

###############################################################
# :: Variables
###############################################################

ifeq ($(wildcard debian/changelog),)
$(error No debian/changelog found.\
	Make sure to run this script from the project root)
endif

# Force sudo auth caching before running parallel builds.
SUDO		:= $(shell sudo which sudo)

DEBPACKAGES	:= $(shell grep '^Package:' debian/control | awk '{print $$2}')
SRCPACK_NAME	:= $(shell head -n1 debian/changelog | awk '{print $$1}')
PACKAGE_VERSION	:= $(shell head -n1 debian/changelog | sed -e 's/.*(\(.*\)).*/\1/')
DISTRIBUTION	:= $(shell head -n1 debian/changelog | awk '{print $$3}' | sed -e 's/;$$//')

CACHEDIR	:= /var/cache/pbuilder
PBUILDDIR	:= $(CACHEDIR)/dists/$(DISTRIBUTION)
RESULTDIR	:= $(CACHEDIR)/result/$(DISTRIBUTION)

ifeq ($(DEBPACKAGES),)
$(error Unable to extract deb names from debian/control)
endif
ifeq ($(SRCPACK_NAME),)
$(error Unable to extract package name from debian/changelog)
endif
ifeq ($(PACKAGE_VERSION),)
$(error Unable to extract package version from debian/changelog)
endif
ifeq ($(DISTRIBUTION),)
$(error Unable to extract distribution from debian/changelog)
endif

DEBPACK_NAME	:= $(lastword $(DEBPACKAGES))

DEBPACK		:= $(DEBPACK_NAME)_$(PACKAGE_VERSION)
SRCPACK		:= $(SRCPACK_NAME)_$(PACKAGE_VERSION)


###############################################################
# :: Rules
###############################################################

.PHONY: default clean distclean upload show build archive update

default: archive
	@echo "All packages were built successfully: $^"

clean:
	rm -f ../$(SRCPACK)*

distclean:
	$(SUDO) rm -f				\
	  $(RESULTDIR)-*/$(DEBPACK_NAME)*	\
	  $(RESULTDIR)-*/$(SRCPACK)*

upload: ../$(SRCPACK)_source.changes
	dput $(ARCHIVE) $<

show:
	@echo "Package name   : $(SRCPACK_NAME)"
	@echo "Package version: $(PACKAGE_VERSION)"
	@echo "Package debs   : $(DEBPACKAGES)"
	@echo "Architectures  : $(ARCHITECTURES)"
	@echo "Distribution   : $(DISTRIBUTION)"

define COWBUILDER_template
build: build-$1
build-$1: $(RESULTDIR)-$1/$(DEBPACK)_$1.deb
$(RESULTDIR)-$1/$(DEBPACK)_$1.deb: $(PBUILDDIR)-$1.cow ../$(SRCPACK).dsc
	$(SUDO) cowbuilder	\
	  --build		\
	  --debbuildopts "-j8"	\
	  --buildresult $$(@D)	\
	  --basepath $$+
	@test -f $$@

archive: archive-$1
archive-$1: build-$1
	$(SUDO) truncate -s0 $(RESULTDIR)-$1/Packages
	$(SUDO) chgrp adm $(RESULTDIR)-$1/Packages
	$(SUDO) chmod g+rw $(RESULTDIR)-$1/Packages
	cd $(RESULTDIR)-$1 && apt-ftparchive packages . > Packages

update: update-$1
update-$1: $(PBUILDDIR)-$1.cow
	$(SUDO) cowbuilder	\
	  --update		\
	  --basepath $$<
	$(SUDO) truncate -s0 $(RESULTDIR)-$1/Release
	$(SUDO) chgrp adm $(RESULTDIR)-$1/Release
	$(SUDO) chmod g+rw $(RESULTDIR)-$1/Release
	echo "Archive: $(DISTRIBUTION)"	>> $(RESULTDIR)-$1/Release
	echo "Component: main"		>> $(RESULTDIR)-$1/Release
	echo "Origin: pbuilder"		>> $(RESULTDIR)-$1/Release
	echo "Label: pbuilder"		>> $(RESULTDIR)-$1/Release
	echo "Architecture: $1"		>> $(RESULTDIR)-$1/Release
endef

$(foreach A,$(ARCHITECTURES),$(eval $(call COWBUILDER_template,$A)))

$(PBUILDDIR)-%.cow:
	$(SUDO) cowbuilder		\
	  --create			\
	  --architecture $*		\
	  --distribution $(DISTRIBUTION)\
	  --basepath $@			\
	  --debootstrapopts "--variant=buildd"
	@test -f $@

# Unsigned for local build.
../$(SRCPACK).dsc: clean
	debuild -S -us -uc
	@test -f $@

# Signed for upload.
../$(SRCPACK)_source.changes: clean
	debuild -S
	@test -f $@
